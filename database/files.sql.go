// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: files.sql

package database

import (
	"context"
)

const createFile = `-- name: CreateFile :one
INSERT INTO files(file_path, mime_type, size)
VALUES(?, ?, ?)
RETURNING id, file_path, mime_type, size, modified_at
`

type CreateFileParams struct {
	FilePath string
	MimeType string
	Size     int64
}

func (q *Queries) CreateFile(ctx context.Context, arg CreateFileParams) (File, error) {
	row := q.db.QueryRowContext(ctx, createFile, arg.FilePath, arg.MimeType, arg.Size)
	var i File
	err := row.Scan(
		&i.ID,
		&i.FilePath,
		&i.MimeType,
		&i.Size,
		&i.ModifiedAt,
	)
	return i, err
}

const getFiles = `-- name: GetFiles :many
SELECT id, file_path, mime_type, size, modified_at FROM files
`

func (q *Queries) GetFiles(ctx context.Context) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, getFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.FilePath,
			&i.MimeType,
			&i.Size,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
